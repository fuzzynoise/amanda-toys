#!/bin/bash

######################
# USER CONFIGURATION #
######################

SLOTS=/var/archive/vtapes/daily/slots
SLOT_PREFIX=slot
MOUNT_TAPES_CSTM=/var/lib/amanda/bin/custom/mount-tapes
AMANDA_USER=amandabackup

##########################
# END USER CONFIGURATION #
##########################

##########################
# TEMPLATES              #
##########################

#echo "########################################################################"
#echo "#                                                                      #"

##########################
# END TEMPLATES          #
##########################

usage() {
    echo "format-tape <label> <device> <slot #>"
    echo
    echo "Example:"
    echo "format-tape daily-001 /dev/sdc 1"
    exit 1
}

source etc/functions
#provides pause, pause_and_assert, assert_equal

# Verify the parameters
if [ "`whoami`" != "$AMANDA_USER" ]; then
    echo "You must run this as user $AMANDA_USER.  Aborting."
    exit 1
fi

if [ "$1" == "" ]; then
    usage
    exit 1
fi

if [ "$2" == "" ]; then
    usage
    exit 1
fi

if [ "$3" == "" ]; then
    usage
    exit 1
fi

# Do sanity checking on the device.  Absolute forbid any mounted device from being used!

DEV=$(mount|grep $2|awk '{print $1}')
if [ "$DEV" != "" ]; then
    echo "Device $2 must be unmounted in order to keep you from trashing your"
    echo "system.  Aborting."
    exit 2
fi

echo "########################################################################"
echo "# Listing the partition table for $2 to see if the drive is            #"
echo "# already partitioned.                                                 #"
echo "########################################################################"
echo

fdisk -l $2

echo
echo "########################################################################"
echo "# If any partitions are listed above, answer 'N' on the line below,    #"
echo "# and put in an new, unpartitioned drive.  Then rerun $0               #"
echo "########################################################################"
echo

pause_and_assert "Continue? (The drive WILL be erased if choose 'y') [Ny] " "N" "Y" 

# Partition the drive

echo
echo "Partitioning the drive..."
echo

sudo fdisk $2 << EOF
n
p
1


w
EOF

if [ "$?" != "0" ]; then
    echo "Partitioning of $2 failed.  Aborting."
    exit 3
fi

PARTITION=$21

echo
echo "Preparing to format partition $PARTITION..."
pause_and_assert "Continue? [Yn] " "Y" "Y"

sudo mkfs.ext3 -L $1 -m 1 -T largefile4 $PARTITION
if [ "$?" != "0" ]; then
    echo "Formatting partition $PARTITION failed"
    exit 4
fi

echo "Fomatting is complete."
echo ""
echo "########################################################################"
echo "# Turn off the external drive sled and then press Enter to continue.   #"
echo "########################################################################"
read -p ""

echo
echo "Waiting for 15 seconds for the device bus to disconnect the drive..."
sleep 15

echo
echo "########################################################################"
echo "# Turn the sled back on, and then press Enter to continue.             #"
echo "########################################################################"
read -p ""

echo
echo "Waiting for 15 seconds to resync the SATA devices..."
sleep 15

echo "Making directory $SLOTS/$SLOT_PREFIX$3"
mkdir $SLOTS/$SLOT_PREFIX$3
if [ "$?" != "0" ]; then
    echo "mkdir $SLOTS/$SLOT_PREFIX$3 failed."
    pause_and_assert "Continue and use $SLOTS/$SLOT_PREFIX$3 as the mount point anyway? [Yn] " "Y" "Y"
fi

echo "Attempting to mount the new partition..."
sudo mount /dev/disk/by-label/$1 $SLOTS/$SLOT_PREFIX$3
if [ "$?" != "0" ]; then
    echo "Mounting partition $PARTITION to $SLOTS/$SLOT_PREFIX$3 failed.  Aborting."
    exit 5
fi

sudo chown amandabackup:disk $SLOTS/$SLOT_PREFIX$3
if [ "$?" != "0" ]; then
    echo "$SLOTS/$3 could not be chowned to amandabackup.disk.  Aborting."
    exit 6
fi

echo "Labeling the tape..."
amlabel daily $1 slot $3
if [ "$?" != "0" ]; then
    echo "The tape $1 could not be labeled.  Aborting."
    exit 7
fi

SCRIPT_COMMAND="do_mount_by_label \"$1\" \"$SLOT_PREFIX$3\""
echo "Preparing to add the following line to $MOUNT_TAPES:"
echo $SCRIPT_COMMAND

pause_and_assert "Continue? [Yn]" "Y" "Y"

cp $MOUNT_TAPES $MOUNT_TAPES.bak
if [ "$?" != "0" ]; then
    echo "$MOUNT_TAPES could not be copied to $MOUNT_TAPES.bak.  Aborting."
    exit 8
fi

echo $SCRIPT_COMMAND >> $MOUNT_TAPES
if [ "$?" != "0" ]; then
    echo "$SCRIPT_COMMAND could not be appended to $MOUNT_TAPES.  Aborting."
    echo 9
fi

echo "Testing mount-tapes..."

$MOUNT_TAPES

echo "########################################################################"
echo "# Done!  If you need to swap tapes out, run 'unmount-tapes', swap the  #"
echo "# tape, and then run 'mount-tapes'                                     #"
echo "#                                                                      #"
echo "# To check that the backup will use the new tape, do the following:    #" 
echo "# $ amcheck -t <backup_conf>                                           #"
echo "########################################################################"
