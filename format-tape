#!/bin/bash

######################
# USER CONFIGURATION #
######################

SLOT_PREFIX=slot
MOUNT_TAPES=/var/backups/bin/mount-tapes
MOUNT_TAPES_CSTM=/var/backups/bin/custom/mount.tapes
BIN_ETC_CSTM=/var/backups/bin/etc
AMANDA_USER=backup
FDISK=/sbin/fdisk

##########################
# END USER CONFIGURATION #
##########################

##########################
# TEMPLATES              #
##########################

#echo "########################################################################"
#echo "#                                                                      #"

##########################
# END TEMPLATES          #
##########################

usage() {
    echo "format-tape <conf> <label> <device> <slot #>"
    echo
    echo "Example:"
    echo "format-tape daily daily-001 /dev/sdc 1"
    exit 1
}

#provides pause, pause_and_assert, assert_equal
source $BIN_ETC_CSTM/functions

# Verify the parameters
if [ "`whoami`" != "$AMANDA_USER" ]; then
    echo "You must run this as user $AMANDA_USER.  Aborting."
    exit 1
fi

if [ "$1" == "" ]; then
    usage
    exit 1
fi

if [ "$2" == "" ]; then
    usage
    exit 1
fi

if [ "$3" == "" ]; then
    usage
    exit 1
fi

if [ "$4" == "" ]; then
    usage
    exit 1
fi

SLOTS=/var/archive/vtapes/$1/slots

# Do sanity checking on the device.  Absolutely forbid any mounted device from being used!

DEV=$(mount|grep $3|awk '{print $2}')
if [ "$DEV" != "" ]; then
    echo "Device $3 must be unmounted in order to keep you from trashing your"
    echo "system.  Aborting."
    exit 2
fi

echo "########################################################################"
echo "# Listing the partition table for $3 to see if the drive is"
echo "# already partitioned."
echo "########################################################################"
echo

$FDISK -l $3

echo
echo "########################################################################"
echo "# If any partitions are listed above, answer 'N' on the line below,"
echo "# and put in an new, unpartitioned drive.  Then rerun"
echo "# $0"
echo "########################################################################"
echo

pause_and_assert "Continue? (The drive WILL be erased if choose 'y') [Ny] " "N" "Y" 

# Partition the drive

echo
echo "Partitioning the drive..."
echo

sudo $FDISK $3 << EOF
n
p
1


w
EOF

if [ "$?" != "0" ]; then
    echo "Partitioning of $3 failed.  Aborting."
    exit 3
fi

PARTITION=$31

echo
echo "Preparing to format partition $PARTITION..."
pause_and_assert "Continue? [Yn] " "Y" "Y"

sudo mkfs.ext3 -L $2 -m 1 -T largefile4 $PARTITION
if [ "$?" != "0" ]; then
    echo "Formatting partition $PARTITION failed"
    exit 4
fi

echo "Fomatting is complete."
echo ""
echo "########################################################################"
echo "# Turn off the external drive sled and then press Enter to continue.   #"
echo "########################################################################"
read -p ""

echo
echo "Waiting for 15 seconds for the device bus to disconnect the drive..."
sleep 15

echo
echo "########################################################################"
echo "# Turn the sled back on, and then press Enter to continue.             #"
echo "########################################################################"
read -p ""

echo
echo "Waiting for 15 seconds to resync the SATA devices..."
sleep 15

echo "Making directory $SLOTS/$SLOT_PREFIX$4"
mkdir $SLOTS/$SLOT_PREFIX$4
if [ "$?" != "0" ]; then
    echo "mkdir $SLOTS/$SLOT_PREFIX$4 failed."
    pause_and_assert "Continue and use $SLOTS/$SLOT_PREFIX$4 as the mount point anyway? [Yn] " "Y" "Y"
fi

echo "Attempting to mount the new partition..."
sudo mount /dev/disk/by-label/$2 $SLOTS/$SLOT_PREFIX$4
if [ "$?" != "0" ]; then
    echo "Mounting partition $PARTITION to $SLOTS/$SLOT_PREFIX$4 failed.  Aborting."
    exit 5
fi

sudo chown amandabackup:disk $SLOTS/$SLOT_PREFIX$4
if [ "$?" != "0" ]; then
    echo "$SLOTS/$4 could not be chowned to amandabackup.disk.  Aborting."
    exit 6
fi

echo "Labeling the tape..."
amlabel $1 $2 slot $4
if [ "$?" != "0" ]; then
    echo "The tape $2 could not be labeled. Unmounting $PARTITION and aborting."
    sudo umount $PARTITION
    echo
    echo "*** Check the 'tapecycle' parameter in amanda.conf. ***"
    echo
    echo "If the label $2 is correct, remove the label from"
    echo "/etc/amanda/$1/tapelist"
    echo "and try again."
    exit 7
fi

SCRIPT_COMMAND="do_mount_by_label \"$2\" \"$SLOT_PREFIX$4\""
echo "Preparing to add the following line to $MOUNT_TAPES_CSTM:"
echo $SCRIPT_COMMAND

pause_and_assert "Continue? [Yn]" "Y" "Y"

cp $MOUNT_TAPES_CSTM $MOUNT_TAPES_CSTM.bak
if [ "$?" != "0" ]; then
    echo "$MOUNT_TAPES_CSTM could not be copied to $MOUNT_TAPES_CSTM.bak.  Aborting."
    exit 8
fi

echo $SCRIPT_COMMAND >> $MOUNT_TAPES_CSTM
if [ "$?" != "0" ]; then
    echo "$SCRIPT_COMMAND could not be appended to $MOUNT_TAPES_CSTM.  Aborting."
    echo 9
fi

echo "Testing mount-tapes..."

$MOUNT_TAPES

echo "########################################################################"
echo "# Done!  If you need to swap tapes out, run 'unmount-tapes', swap the  #"
echo "# tape, and then run 'mount-tapes'                                     #"
echo "#                                                                      #"
echo "# To check that the backup will use the new tape, do the following:    #" 
echo "# $ amcheck -t <backup_conf>                                           #"
echo "########################################################################"
